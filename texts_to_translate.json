[
    "基本基本功能",
    "首尾",
    "属性和基础数据",
    "加速操作",
    "灵活的二进制操作",
    "匹配 /广播行为",
    "缺少填充值的数据 /操作",
    "灵活的比较",
    "布尔减少",
    "比较对象是否等效",
    "比较类似数组的对象",
    "结合重叠的数据集",
    "一般数据帧组合",
    "描述性统计",
    "总结数据：描述",
    "最小/最大值的索引",
    "值计数（直方图） /模式",
    "离散和量化",
    "功能应用程序",
    "tablewise功能应用程序",
    "行或列功能应用程序",
    "聚合API",
    "汇总多个功能",
    "汇总",
    "定制描述",
    "变换API",
    "使用多个功能转换",
    "用dict变化",
    "应用元素函数",
    "重新索引和更改标签",
    "重新索引与另一个对象对齐",
    "与对齐对象对准对象",
    "填充时填充",
    "在填充时限制填充",
    "从轴上删除标签",
    "重命名 /映射标签",
    "迭代",
    "项目",
    "Iterrows",
    "迭代",
    ".DT访问者",
    "矢量化的字符串方法",
    "排序",
    "由索引",
    "按值",
    "通过索引和值",
    "搜索",
    "最小 /最大的值",
    "通过多索引列进行排序",
    "复制",
    "dtypes",
    "默认值",
    "升级",
    "astype",
    "对象转换",
    "陷入困境",
    "根据DTYPE选择列",
    "在这里，我们讨论了pandas数据结构常见的许多基本功能。首先，让我们创建一些示例对象，就像我们在pandas部分的10分钟内所做的那样：",
    "要查看系列或数据框对象的一小部分样本，请使用head（）和tail（）方法。要显示的默认元素数为五个，但是您可以通过自定义号码。",
    "pandas对象具有许多属性，使您能够访问元数据",
    "形状：给出对象的轴尺寸，与ndarray一致",
    "系列：索引（仅轴）",
    "数据框：索引（行）和列",
    "请注意，这些属性可以安全分配！",
    "可以将Pandas对象（索引，系列，数据框架）视为数组的容器，这些容器容纳实际数据并执行实际的计算。对于许多类型，基础数组是numpy.ndarray。但是，pandas和第三方库可以扩展Numpy的类型系统以添加对自定义数组的支持（请参阅DTYPES）。",
    "要在索引或系列中获取实际数据，请使用.array属性",
    "数组将永远是一个扩展名。扩展程序的确切细节以及Pandas使用它们的原因超出了本介绍的范围。请参阅dtypes。",
    "如果您知道需要一个numpy数组，请使用to_numpy（）或numpy.asarray（）。",
    "当系列或索引得到扩展程序的支持时，to_numpy（）可能涉及复制数据和胁迫值。请参阅dtypes。",
    "to_numpy（）可以控制所得的numpy.ndarray的dtype。例如，考虑使用时区域的数据量。 numpy没有代表时区感知数据的dtype，因此有两个可能有用的表示：",
    "一个带有时间戳对象的对象dtype numpy.ndarray，每个dyparay都有正确的tz",
    "datetime64 [ns] -dtype numpy.ndarray，其中的值已转换为UTC，并丢弃了时区",
    "时区可以用dtype =对象保存",
    "或用dtype ='datetime64 [ns]'扔掉",
    "在数据范围内获取“原始数据”可能会更复杂。当您的DataFrame仅具有所有列的单个数据类型时，dataframe.to_numpy（）将返回基础数据：",
    "如果数据帧包含同质性数据，则实际上可以对NDARRAY进行修改，并且更改将反映在数据结构中。对于异质数据（例如，某些DataFrame的列并非全部相同的DTYPE），情况并非如此。与轴标签不同，值属性本身无法分配给。",
    "笔记",
    "在使用异质数据时，将选择所得的Ndarray的dtype以适应所有涉及的数据。例如，如果涉及字符串，则结果将为对象dtype。如果只有浮子和整数，则结果阵列将是浮点dtype。",
    "过去，PANDAS推荐的series.values或dataframe.Values用于从系列或数据框架中提取数据。您仍然会在旧代码库和在线中找到对这些的参考。展望未来，我们建议避免使用。值和.to_numpy（）。 .values具有以下缺点：",
    "当您的系列包含扩展类型时，尚不清楚series.values是否返回numpy数组或扩展阵列。 series.Array将始终返回扩展名称，并且永远不会复制数据。 series.to_numpy（）将始终以复制 /胁迫值的成本返回一个numpy数组。",
    "当您的数据帧包含数据类型的混合物时，数据框。值可能涉及将数据复制和胁迫值驱动到普通dtype，这是一个相对昂贵的操作。 DataFrame.to_numpy（）是一种方法，可以更清楚地表明，返回的numpy数组可能不是数据框中相同数据的视图。",
    "pandas有 支持使用NumExpr库和瓶颈库加速某些类型的二进制数值和布尔操作。",
    "在处理大型数据集并提供大型加速时，这些库特别有用。 NumExpr使用智能块，缓存和多个内核。瓶颈是一组专业的Cython例程，在处理具有NAN的阵列时特别快。",
    "这是一个示例（使用100列x 100,000行数据框）：",
    "手术",
    "0.11.0（ms）",
    "先验版本（MS）",
    "比率与先验",
    "DF1> DF2",
    "13.32",
    "125.35",
    "0.1063",
    "DF1 * DF2",
    "21.71",
    "36.63",
    "0.5928",
    "DF1 + DF2",
    "22.04",
    "36.50",
    "0.6039",
    "鼓励您安装两个库。有关更多安装信息，请参见建议的依赖项。",
    "默认情况下可以使用这些，您可以通过设置选项来控制此选项：",
    "通过pandas数据结构之间的二进制操作，有两个关键的兴趣点：",
    "较高（例如数据框）和较低维（例如串联）对象之间的广播行为。",
    "计算中缺少数据。",
    "我们将演示如何独立管理这些问题，尽管可以同时处理它们。",
    "DataFrame具有方法add（），sub（），mul（），div（）和相关功能radd（），rsub（），…用于执行二进制操作。对于广播行为，系列输入是主要的兴趣。使用这些功能，您可以使用轴关键字在索引上匹配或列匹配：",
    "此外，您可以将多索引数据框架的水平与一个系列保持一级。",
    "系列和索引还支持divmod（）内置。此功能同时采用地板划分和Modulo操作，以返回与左侧相同类型的两翼。例如：",
    "我们还可以执行elementwise divmod（）：",
    "在串联和数据框中，算术函数具有输入fill_value的选项，即当缺少位置的最多值时，可以替换一个值。例如，当添加两个数据帧对象时，您可能希望将NAN视为0，除非两个数据范围都缺少该值，在这种情况下，结果将为NAN（稍后您可以在愿意的情况下使用fillna替换NAN）。",
    "系列和数据帧具有二进制比较方法等式，NE，LT，GT，LE和GE，其行为类似于上述二进制算术操作：",
    "这些操作产生了与Dtype bool的左侧输入相同类型的pandas对象。这些布尔对象可用于索引操作，请参见有关布尔索引的部分。",
    "您可以应用减少：空，任何（），all（）和bool（），以提供总结布尔结果的方法。",
    "您可以降低到最终的布尔值。",
    "您可以通过空属性测试PANDAS对象是否为空。",
    "警告",
    "主张pandas对象的真实性将引起错误，因为对空虚或价值观的测试是模棱两可的。",
    "有关更详细的讨论，请参见Gotchas。",
    "通常，您可能会发现有多种计算相同结果的方法。作为一个简单的示例，请考虑DF + DF和DF * 2。要测试这两个计算产生相同的结果，鉴于上面显示的工具，您可能会想象使用（df + df == df * 2）.all（）。但是实际上，这种表达是错误的：",
    "请注意，布尔数据帧DF + df == df * 2包含一些错误值！这是因为NAN并不将其比较：",
    "因此，NDFRAME（例如系列和数据范围）具有用于测试平等的Equals（）方法，而NAN在相应的位置被视为相等。",
    "请注意，系列或数据框架索引必须按照相同的顺序才能实现：",
    "在比较具有标量值的pandas数据结构时，您可以方便地执行元素比较：",
    "pandas还处理相同长度的不同数组的对象之间的元素比较：",
    "试图比较不同长度的索引或串联对象将引起一个价值：",
    "偶尔出现的一个问题是两个相似的数据集的组合，其中一个中的值比另一个相似。一个例子是两个数据系列，代表一个特定的经济指标，其中一个指标被认为是“更高质量”。但是，较低的质量系列可能会在历史上进一步扩展或具有更完整的数据覆盖范围。因此，我们想结合两个数据帧对象，其中一个数据框中的缺少值有条件地填充了另一个数据帧中标记的值。实现此操作的函数是bombine_first（），我们说明：",
    "上面的combine_first（）方法调用更通用的dataframe.combine（）。此方法采用另一个数据框和一个组合函数，将输入dataframe对齐，然后通过串联的组合函数对（即其名称相同的列）。",
    "因此，例如，如上所述复制combine_first（）：",
    "有大量用于计算描述性统计数据和其他相关操作的方法。大多数 SE是聚集（因此产生较低的结果），例如sum（），均值（）和刻克（），但是其中一些（例如cumsum（）和cumprod（）产生相同大小的对象。一般而言，这些方法像ndarray一样采用轴论点。{sum，std，…}，但是可以通过名称或整数指定轴：",
    "系列：不需要轴心参数",
    "dataFrame：“ index”（axis = 0，默认），“列”（axis = 1）",
    "例如：",
    "所有此类方法均具有Skipna选项信号，是否排除丢失的数据（默认情况下为true）：",
    "结合广播 /算术行为，人们可以描述各种统计程序，例如标准化（使数据零均值和1的标准偏差为1），非常简洁：",
    "请注意，诸如cumsum（）和cumprod（）之类的方法保留了NAN值的位置。这与扩展（）和滚动（）有些不同，因为NAN行为是由min_periods参数决定的。",
    "这是常见功能的快速参考摘要表。每个都采用可选级别参数，该参数仅在对象具有层次索引时应用。",
    "功能",
    "描述",
    "数数",
    "非NA观测的数量",
    "和",
    "价值之和",
    "意思是",
    "值的平均值",
    "中位数",
    "算术值中位数",
    "最小",
    "最低限度",
    "最大限度",
    "最大限度",
    "模式",
    "模式",
    "腹肌",
    "绝对值",
    "产品",
    "值的产物",
    "std",
    "贝塞尔校正的样品标准偏差",
    "var",
    "公正的差异",
    "SEM",
    "平均标准错误",
    "偏斜",
    "样品偏度（第三矩）",
    "库尔特",
    "样品峰度（第四刻）",
    "分位数",
    "样品分位数（值为％）",
    "暨",
    "累积总和",
    "acprod",
    "累积产品",
    "康玛克斯",
    "累积最大值",
    "康明",
    "累积最小值",
    "请注意，偶然的某些numpy方法（例如均值，std和sum）将默认情况下在串联输入上排除NAS：",
    "Series.nunique（）将返回系列中唯一的非NA值的数量：",
    "有一个方便的描述功能（）函数，该函数计算了有关一个系列或dataFrame列的各种摘要统计信息（当然不包括NAS）：",
    "您可以选择要在输出中包含的特定百分位数：",
    "默认情况下，中位数始终包括。",
    "对于非数字串联对象，Decording（）将简单地总结唯一值的数量和最常见的值：",
    "请注意，在混合型dataframe对象上，describe（）将限制摘要仅包括数值列，或者，如果没有数值列，则仅包括分类列：",
    "可以通过提供类型列表（包括/排除参数）来控制此行为。特殊值也可以使用：",
    "该功能依赖于select_dtypes。有关接受的输入的详细信息，请参阅此处。",
    "IDXMIN（）和IDXMAX（）在串联和DataFrame上函数，以最小和最大相应值计算索引标签：",
    "当有多个行（或列）匹配最小值或最大值时，idxmin（）和idxmax（）返回第一个匹配索引：",
    "笔记",
    "iDxmin和idxmax在numpy中称为argmin和argmax。",
    "value_counts（）系列方法计算一个值阵列的直方图。它也可以用作常规数组的函数：",
    "value_count（）方法可用于计数多个列的组合。默认情况下，使用所有列，但是可以使用子集参数选择子集。",
    "同样，您可以获得最常发生的值（s），即系列或数据框中的值的模式，：",
    "连续值可以使用cut（）（基于值）和qcut（）（基于样品分位数）函数的ccut（bins）函数离散化：",
    "qcut（）计算样品分位数。例如，我们可以将一些正态分布的数据切成等于大小的四分位数，因此：",
    "我们还可以通过无限值来定义垃圾箱：",
    "要将自己或其他库的功能应用于pandas对象，您应该知道以下三种方法。使用的适当方法取决于您的功能是否期望在整个数据框架或系列（行或列）上或Elementwise上运行。",
    "tablewise功能应用程序：pipe（）",
    "行或列功能应用程序：apply（）",
    "聚合API：AGG（）和Transform（）",
    "应用元素函数：map（）",
    "数据范围和系列可以传递到功能中。但是，如果需要在链中调用该函数，请考虑使用管道（）方法。",
    "首先一些设置：",
    "extract_city_name和add_country_name是函数采用和返回数据框架。",
    "现在比较以下内容：",
    "等同于：",
    "Pandas鼓励第二种样式，称为方法链。管道使您可以轻松地在方法链中使用您自己的或其他库的功能以及pandas的方法。",
    "在上面的示例中，函数extract_city_name和add_country_name每个都期望dataframe作为第一个位置参数。如果您希望应用的函数将其数据作为第二个参数如何？在这种情况下，为管道提供（可callable，data_keyword）的元组。 .Pipe将将数据框路由到元组中指定的参数。",
    "例如，我们可以使用StatsModels拟合回归。他们的API期望形式 ula首先，数据框架作为第二个参数，数据。我们将关键字对（sm.ols，'data'）传递到管道：",
    "该管道方法的灵感来自UNIX管道和最近的Dplyr和Magrittr，这些管道引入了流行的（％>％）（读取管）操作员。我们鼓励您查看管道（）的源代码。",
    "可以使用Apply（）方法沿数据框的轴沿数据框架应用任意功能，就像描述性统计方法一样，它采用可选轴参数：",
    "Apply（）方法还将在字符串方法名称上派遣。",
    "传递给apply（）函数的返回类型会影响dataFrame的最终输出的类型。适用于默认行为：",
    "如果应用功能返回系列，则最终输出是数据框架。这些列与应用功能返回的系列的索引匹配。",
    "如果应用功能返回任何其他类型，则最终输出是系列。",
    "可以使用result_type覆盖此默认行为，该效果可以接受三个选项：减少，广播和扩展。这些将决定列表返回值如何扩展到数据框架。",
    "apply（）结合一些聪明的方法可以用来回答有关数据集的许多问题。例如，假设我们想提取每列发生的最大值的日期：",
    "您也可以将其他参数和关键字参数传递给apply（）方法。",
    "另一个有用的功能是能够通过系列方法在每列或行上执行一些串联操作：",
    "最后，apply（）获取一个参数RAW，默认情况下是错误的，该参数在应用该函数之前将每个行或列转换为系列。设置为true时，传递的函数将接收一个ndarray对象，如果您不需要索引功能，该对象将具有积极的性能含义。",
    "聚合API允许一个人以一种简洁的方式表达可能多个聚合操作。此API在pandas对象上相似，请参见GroupBy API，窗口API和重新样本API。聚合的输入点是dataframe.aggregate（）或别名dataframe.agg（）。",
    "我们将使用上面的类似起始框架：",
    "使用单个函数等效地应用（）。您也可以将命名方法作为字符串传递。这些将返回一系列汇总输出：",
    "系列中的单个聚合将返回标量值：",
    "您可以将多个聚合参数作为列表传递。每个传递函数的结果将是结果框架中的一行。这些自然是从聚合函数中命名的。",
    "多个功能产生多行：",
    "在系列中，多个函数返回一个由函数名称索引的系列：",
    "通过lambda功能将产生<lambda> nate low：",
    "传递命名函数将使该行的名称产生：",
    "将列名的字典传递给标量或标量列表，dataframe.agg允许您自定义哪些函数应用于哪些列。请注意，结果不在任何特定的顺序中，您可以使用订单列表来保证订购。",
    "传递列表的样将生成数据框架输出。您将获得所有聚合器的类似矩阵输出。输出将包含所有唯一功能。那些未针对特定列的人将是NAN：",
    "使用.agg（），可以轻松创建一个自定义描述功能，类似于内置的描述函数。",
    "transform（）方法返回一个与原始索引相同（相同大小）的对象。此API允许您同时提供多个操作，而不是一对一。它的API与.AGG API非常相似。",
    "我们创建了类似于上述部分中使用的框架。",
    "改变整个框架。 .transform（）允许输入函数为：numpy函数，字符串函数名称或用户定义的函数。",
    "这里transform（）接收到一个函数；这等同于UFUNC应用程序。",
    "将单个函数传递到带有系列的.transform（）将产生一个系列回报。",
    "传递多个功能将产生列多索引数据框架。第一级将是原始帧列名称；第二级将是转换功能的名称。",
    "将多个功能传递到系列将产生数据框架。结果列名称将是转换功能。",
    "传递功能的dist将允许每个列的选择性转换。",
    "通过列表的命令将通过这些选择性转换生成多索引数据框架。",
    "由于并非所有函数都可以矢量化（接受numpy数组并返回另一个数组或值），因此dataframe上的方法映射（）和类似地映射（在串联上接受python函数），以单个值并返回单个值。例如：",
    "series.map（）具有附加功能；它可用于轻松地“链接”或“映射”值，由次级系列定义。这 与合并/加入功能密切相关：",
    "ReIndex（）是pandas中的基本数据一致性方法。它用于实现依赖标签 - 对准功能的几乎所有其他功能。重新指数意味着将数据符合以匹配沿特定轴的一组标签。这完成了几件事：",
    "将现有数据重新定位以匹配新的标签",
    "在不存在该标签的数据的标签位置插入缺失值（NA）标记",
    "如果指定，请使用逻辑填充缺少标签的数据（与时间序列数据高度相关）",
    "这是一个简单的例子：",
    "在这里，该系列中未包含F标签，因此在结果中以NAN的形式出现。",
    "使用dataFrame，您可以同时重新索引索引和列：",
    "请注意，可以在对象之间共享包含实际轴标签的索引对象。因此，如果我们有一个系列和数据框，可以完成以下操作：",
    "这意味着Reindexed系列的索引与DataFrame的索引是相同的Python对象。",
    "dataFrame.Reindex（）还支持“轴式”调用约定，在其中您指定单个标签参数及其适用的轴。",
    "参见",
    "MultiIndex /高级索引是进行重新索引的一种更简洁的方式。",
    "笔记",
    "在编写对性能敏感的代码时，有一个充分的理由花一些时间成为一个重新索引忍者：在预先调整的数据上，许多操作都更快。在内部添加两个未对准的数据范围会触发一个重新索引步骤。对于探索性分析，您几乎不会注意到差异（因为ReIndex已得到了大量优化），但是当CPU循环事物事物事项会在这里和那里撒一些明确的ReIndex调用时，可能会产生影响。",
    "您可能希望采用一个对象并重新索引其轴，以标记与另一个对象相同。尽管语法是直接的，但尽管有冗长的话，但它是一个常见的操作，可以使reindex_like（）方法可以使此更简单：",
    "对齐（）方法是同时对齐两个对象的最快方法。它支持加入参数（与加入和合并有关）：",
    "join ='ofter'：采用索引的结合（默认）",
    "join ='left'：使用调用对象的索引",
    "join ='right'：使用传递的对象的索引",
    "join ='inner'：与索引相交",
    "它返回了两个重新索引系列的元组：",
    "对于DataFrames，默认情况下将将JOIN方法应用于索引和列：",
    "您也可以通过轴选项仅在指定轴上对齐：",
    "如果将系列传递到dataframe.align（），则可以选择使用axis参数上的两个对象在数据框架索引上对齐两个对象：",
    "ReIndex（）采用可选参数方法，这是从下表选择的填充方法：",
    "方法",
    "行动",
    "PAD / FFILL",
    "向前填充值",
    "Bfill /回填",
    "向后填充值",
    "最近",
    "填写最近的索引值",
    "我们在一个简单的系列中说明了这些填充方法：",
    "这些方法要求索引有序增加或减少。",
    "请注意，使用FFILL（方法='最近）或插值可以实现相同的结果：",
    "如果该指数不是单调增加或减少，则ReIndex（）将提高价值。 fillna（）和interpaly（）将不对索引的顺序进行任何检查。",
    "限制和公差论点在重新索引时提供了对填充的额外控制权。极限指定连续匹配的最大计数：",
    "相反，公差指定索引和索引值之间的最大距离：",
    "请注意，当在DateTimeIndex，TimeDeltainDex或SecerIndex上使用时，如果可能的话，公差将胁迫到序列。这使您可以用适当的字符串指定公差。",
    "与ReIndex紧密相关的方法是Drop（）函数。它从轴上删除了一组标签：",
    "请注意，以下内容也有效，但有点明显 /干净：",
    "Rename（）方法允许您根据某些映射（dict或series）或任意函数重新标记轴。",
    "如果通过一个函数，则必须在使用任何标签调用时返回值（并且必须产生一组唯一值）。也可以使用dict或系列：",
    "如果映射不包含列/索引标签，则不会重命名。请注意，映射中的额外标签不会出错。",
    "dataFrame.Rename（）还支持“轴式”调用约定，在此指定单个映射器和轴以将映射应用于。",
    "最后，Rename（）还接受类似标量或列表的更改series.name属性。",
    "方法dataframe.rename_axis（）和series.rename_axis（）允许更改多索引的特定名称（与标签相反）。",
    "pandas对象基本迭代的行为取决于类型。当迭代一个系列时，它被视为数组状，基本迭代会产生值。数据范围遵循对象的“键”迭代的命令式约定。",
    "简而言之",
    "系列：v alues",
    "数据帧：列标签",
    "因此，例如，通过数据框进行迭代为您提供列名：",
    "Pandas对象还具有类似dict的项目（）方法，可以在（键，值）对上迭代。",
    "要迭代数据框的行，您可以使用以下方法：",
    "iterrows（）：在数据框的行上迭代为（索引，系列）对。这将行转换为串联对象，这些对象可以更改DTYPE并具有一些性能含义。",
    "itertuples（）：迭代数据框的行作为值的名称。这比iterrows（）快得多，在大多数情况下，更可取，而不是迭代数据框架的值。",
    "警告",
    "通过pandas对象迭代通常很慢。在许多情况下，不需要手动在行上手动迭代，并且可以使用以下方法之一避免：",
    "寻找矢量化解决方案：可以使用内置方法或Numpy函数进行许多操作，（布尔）索引，…",
    "如果您的功能无法立即在完整的数据帧/系列上工作时，最好使用Apply（）而不是对值进行迭代。请参阅功能应用程序上的文档。",
    "如果您需要对值进行迭代操作，但性能很重要，请考虑用Cython或Numba编写内部循环。有关此方法的一些示例，请参见“增强性能”部分。",
    "警告",
    "您绝不应该修改您正在迭代的东西。在所有情况下，这都不能保证。根据数据类型，迭代器返回副本而不是视图，并且写入它将没有效果！",
    "例如，在以下情况下设置该值没有效果：",
    "与类似于dict的接口一致，items（）通过键值对迭代：",
    "系列：（索引，标量值）对",
    "dataFrame ：（列，系列）对",
    "例如：",
    "Iterrows（）允许您迭代数据帧的行作为串联对象。它返回一个迭代器，产生每个索引值以及包含每一行数据的系列：",
    "笔记",
    "因为iterrows（）返回每行的系列，所以它不能在整个行上保留dtypes（dypes在跨列列以dataframes的列保留）。例如，",
    "现在，所有作为系列返回的值中的所有值都将升至浮点，也是第x列中的原始整数值：",
    "为了在行上迭代时保留dtypes，最好使用itertuples（）返回命名值的命名，并且通常比iterrows（）快得多。",
    "例如，转换数据框的一种人为的方法是：",
    "itertuples（）方法将返回一个迭代器，该迭代器为数据框中的每一行提供一个名为tuple。元组的第一个元素将是行的相应索引值，而其余值是行值。",
    "例如：",
    "此方法不会将行转换为串联对象。它仅返回名为Tuple内部的值。因此，itertuples（）保留了值的数据类型，并且通常为iterrows（）更快。",
    "笔记",
    "如果列名称为无效的Python标识符，重复或以下划线开始，则列名称将被重命名为位置名称。在大量列（> 255）的情况下，返回常规元素。",
    "系列具有一个登录器，可以简洁地返回DateTime类似于该系列值的属性，如果它是DateTime/ofere of类似的系列。这将返回一个类似于现有系列的索引的系列。",
    "这使得这样的表达方式：",
    "您可以轻松地产生TZ意识转换：",
    "您还可以链接这些类型的操作：",
    "您还可以将dateTime值格式为字符串，使用series.dt.strftime（）支持与标准strftime（）相同的格式。",
    ".DT访问者适用于期间和TimeDelta dtypes。",
    "笔记",
    "如果您使用非二元时间式值访问，则Series.dt将升级typeError。",
    "系列配备了一组字符串处理方法，使其易于在数组的每个元素上操作。也许最重要的是，这些方法自动排除了缺失/NA值。这些可以通过该系列的STR属性访问，并且通常具有与等效（标量）内置字符串方法匹配的名称。例如：",
    "还提供了功能强大的模式匹配方法，但请注意，默认情况下，图案匹配通常使用正则表达式（在某些情况下总是使用它们）。",
    "笔记",
    "在PANDAS 1.0之前，仅在对象-dtype系列上可用字符串方法。 PANDAS 1.0添加了专用于字符串的字符串Dtype。有关更多信息，请参见文本数据类型。",
    "请参阅矢量化的字符串方法以获取完整的描述。",
    "pandas支持三种排序：按索引标签进行排序，按列值进行排序，并通过两者的组合进行排序。",
    "Series.Sort_Index（）和dataFrame.sort_index（）方法用于按其索引级别对pandas对象进行分类。",
    "通过索引对索引进行排序还支持一个关键参数，该参数采用可可函数以应用于要排序的索引。对于多索引对象，将密钥应用于按级别指定的级别。",
    "为了 有关按值分类的信息，请参见值排序。",
    "Series.Sort_Values（）方法用于按其值对系列进行排序。 dataFrame.sort_values（）方法用于按其列或行值对数据框进行排序。可以使用参数到dataFrame.sort_values（）的可选可用于指定一个或多个用于确定排序顺序的列。",
    "BY参数可以获取列名的列表，例如：",
    "这些方法通过Na_position参数对Na值进行特殊处理：",
    "排序还支持一个关键参数，该参数采用可呼叫函数以应用于要排序的值。",
    "键将获得一系列值，并应返回具有转换值的相同形状的系列或数组。对于数据帧对象，键是每个列应用的，因此键仍应期望系列并返回系列，例如",
    "每列的名称或类型可用于将不同的功能应用于不同的列。",
    "字符串作为by参数传递给dataframe.sort_values（）可以是指列或索引级别的名称。",
    "按“第二”（索引）和“ A”（列）排序（列）",
    "笔记",
    "如果字符串同时匹配列名和索引级别名称，则会发出警告，并优先。这将导致未来版本中的歧义错误。",
    "系列具有搜索（）方法，该方法与numpy.ndarray.searchsorted（）相似。",
    "系列具有nsmallest（）和nlargest（）方法，它们返回最小或最大的n值。对于一个大型系列，这比对整个系列进行排序和呼叫头（N）的速度要快得多。",
    "DataFrame还具有最高的和NSMALLEST方法。",
    "当列是多索引时，您必须明确地进行排序，并完全指定所有级别。",
    "pandas对象上的copy（）方法复制了基础数据（尽管不是轴索引，因为它们是不可变的），并返回一个新对象。请注意，很少需要复制对象。例如，只有几种方法可以更改就地数据框架：",
    "插入，删除或修改列。",
    "分配给索引或列属性。",
    "对于均质数据，直接通过值属性或高级索引来修改值。",
    "需要明确的是，没有pandas方法具有修改数据的副作用。几乎每种方法都返回一个新对象，而原始对象则未受到影响。如果修改了数据，那是因为您明确地进行了操作。",
    "在大多数情况下，PANDA使用Numpy阵列和DTYPE用于数据框架的串联或单个列。 Numpy提供了对Float，int，bool，timeDelta64 [ns]和datetime64 [ns]的支持（请注意，Numpy不支持TimeZone-Aware Aware DateTimes）。",
    "pandas和第三方库在几个地方扩展了numpy的类型系统。本节描述了pandas在内部进行的扩展。有关如何编写与pandas一起使用的扩展名，请参见扩展类型。有关实现扩展名的第三方库列表，请参见“生态系统”页面。",
    "下表列出了所有pandas扩展类型。对于需要dtype参数的方法，可以按照指示指定字符串。有关每种类型的更多信息，请参见各自的文档部分。",
    "类型的数据",
    "数据类型",
    "标量",
    "大批",
    "字符串别名",
    "tz感知的日期时间",
    "DateTimetzDtype",
    "时间戳",
    "arrays.datetimearray",
    "'datetime64 [ns，<tz>]'",
    "分类",
    "分类型",
    "（没有任何）",
    "分类",
    "'类别'",
    "时期（时间跨度）",
    "ocerddtype",
    "时期",
    "arrays.periodarray'ofere [<freq>]'",
    "'周期[<freq>]'，",
    "疏",
    "SparsedType",
    "（没有任何）",
    "arrays.sparsearray",
    "“稀疏”，“稀疏[int]”，“稀疏[float]'",
    "间隔",
    "InterveldType",
    "间隔",
    "arrays.intervalarray",
    "'Interval'，'Interval'，'Interval [<Numpy_dtype>]'，'Interval [dateTime64 [ns，<tz>]]，'间隔[TIMEDELTA64 [<freq>]]'",
    "无效整数",
    "int64dtype，…",
    "（没有任何）",
    "arrays.integerarray",
    "'int8'，'int16'，'int32'，'int64'，'uint8'，'uint16'，'uint32'，'uint64''",
    "无效的浮点",
    "float64dtype，…",
    "（没有任何）",
    "Arrays.FloatingArray",
    "'float32'，'float64'",
    "字符串",
    "stringDtype",
    "str",
    "arrays.stringarray",
    "'细绳'",
    "布尔（与NA）",
    "布尔犬",
    "布尔",
    "Arrays.BooleanArray",
    "“布尔”",
    "pandas有两种存储弦的方法。",
    "对象dtype，可以容纳任何python对象，包括字符串。",
    "StringDtype，专门用于字符串。",
    "通常，我们建议使用StringDtype。有关更多信息，请参见文本数据类型。",
    "最后，可以使用对象dtype存储任意对象，但应尽可能避免（有关与其他库和方法的性能和互操作性。请参见对象转换）。",
    "一个方便的数据框架属性返回带有每列数据类型的系列。",
    "在串联对象上，使用dtype属性。",
    "如果pandas对象在单列中包含具有多个dtypes的数据，则将选择该列的dtype以适应所有数据类型（对象是最一般的）。",
    "可以通过调用DataFrame.dtypes.value_counts（）找到每个类型的列数。",
    "数字dtypes将传播并可以在数据框架中共存。如果传递dtype（要么Directl y通过dtype关键字，一个传递的ndarray或一个通过的系列），然后将其保存在数据帧操作中。此外，不会组合不同的数字dtypes。以下示例将使您品尝。",
    "默认情况下，整数类型为INT64，而浮点类型为Float64，无论平台如何（32位或64位）。以下所有内容都会导致INT64 dtypes。",
    "请注意，Numpy在创建数组时会选择依赖平台的类型。以下将导致32位平台上的INT32。",
    "当与其他类型结合使用时，可以将类型升高，这意味着它们是从当前类型（例如int fo float）促进的。",
    "dataFrame.to_numpy（）将返回dtypes的低命令式派纳分子，这意味着可以容纳所得均匀dtyped numpy阵列中所有类型的dtype。这可能会迫使一些升起。",
    "您可以使用Astype（）方法将DTYPE从一个转换为另一个。默认情况下，即使dtype不变（通过copy = false以更改此行为），这些将返回副本。此外，如果ASTYPE操作无效，它们将提出例外。",
    "升级始终按照Numpy规则。如果一个操作涉及两个不同的dtypes，则将使用越一般的dtypes作为操作。",
    "使用Astype（）将列的子集转换为指定类型。",
    "通过将dict传递给astype（），将某些列转换为特定的dtype。",
    "笔记",
    "尝试使用ASTYPE（）和LOC（）将列的子集转换为指定类型时，会发生升级。",
    "LOC（）试图适合我们分配给当前dtypes的内容，而[]将覆盖它们从右侧拿出DTYPE。因此，以下代码会产生意想不到的结果。",
    "Pandas提供了各种功能，试图将类型从对象dtype迫使类型转换为其他类型。如果数据已经是正确的类型，但是存储在对象阵列中的情况下，可以使用dataframe.infer_objects（）和series.infer_objects（）方法来软转换为正确的类型。",
    "由于数据已转置原始推理将所有列存储为对象，因此推断_objects将纠正这些对象。",
    "以下功能可用于一维对象阵列或标量，以执行对象的硬转换为指定类型：",
    "to_numeric（）（转换为数字dtypes）",
    "to_dateTime（）（转换为DateTime对象）",
    "to_timedelta（）（转换为timedelta对象）",
    "为了强制转换，我们可以传递一个错误参数，该论点指定了pandas应该如何处理无法转换为所需的dtype或对象的元素。默认情况下，错误='rish'，这意味着在转换过程中遇到的任何错误都会增加。但是，如果错误='coerce'，这些错误将被忽略，而pandas将有问题的元素转换为pd.nat（用于dateTime和timedelta）或np.nan（对于数字）。如果您在数据中读取主要是所需的dtype（例如数字，dateTime），但偶尔有不合格的元素会相互结合，您希望表示为丢失：",
    "除了对象转换外，to_numeric（）还提供了另一个参数降低，该参数可以选择将新（或已经）数字数据降低到较小的dtype，从而保存内存：",
    "由于这些方法仅适用于一维阵列，列表或标量；它们不能直接用于多维对象，例如数据范围。但是，使用Apply（），我们可以有效地“应用”每列上的功能：",
    "在整数类型数据上执行选择操作可以轻松地将数据升至浮动。在未引入NAN的情况下，将保留输入数据的dtype。另请参阅Integer NA的支持。",
    "而浮动dtypes不变。",
    "Select_dtypes（）方法基于其DTYPE实现列的子集。",
    "首先，让我们创建一个具有不同dtypes的数据框架：",
    "和dtypes：",
    "select_dtypes（）有两个参数包括和排除，使您可以说“用这些dtypes给我列”（包括）和/或“没有这些dtypes的列”（排除）。",
    "例如，选择布尔列：",
    "您也可以在numpy dtype层次结构中传递dtype的名称：",
    "select_dtypes（）也可以使用通用dtypes。",
    "例如，在排除无符号整数时选择所有数字和布尔列：",
    "要选择字符串列，您必须使用对象dtype：",
    "要查看像numpy这样的通用dtype的所有孩子dtypes。",
    "所有numpy dtypes都是numpy.generic的子类：",
    "笔记",
    "PANDA还定义了类型类别和DateTime64 [NS，TZ]，它们未集成到正常的Numpy层次结构中，并且不会显示上述功能。"
]